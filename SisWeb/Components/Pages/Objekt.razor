@page "/objekt"

@inject IUriHelper uriHelper
@inject SisWeb.Services.Session.ISessionHelper session
@inject SisWeb.Services.SisCore.IObjectService objectService
@inject ILogger<Objekt> logger

@using SisWeb.Services.Dto.Sis
@using Kendo.Blazor.Components.Grid
@using SisWeb.Services.SisCore;

@*<PopupComponent IsPopupOpen="@_isPopupOpen" Animation="PopupComponent.AnimationType.FadeIn" Title="A Popup Demo Title" />
    <button type="button" class="btn btn-primary" onclick="@(e => OpenPopup())"><span class="oi oi-plus"></span> Open Popup</button>*@

@if (objects == null)
{
    <p><em>Loading data...</em></p>
}
else
{
    <ConfirmDialog IsPopupOpen="@isPopupOpen" Animation="ConfirmDialog.AnimationType.FadeIn" ActionMethod="@RemoveObject" Descr ="@removeQuestion" Title="Opravdu chcete odstranit záznam?" />
    isPopupOpen = false;

    <div class="form-row align-items-center">
        <div class="col-auto">
            <div class="md-form">
                <input type="text" class="form-control mb-2" id="txtNazevObjektu" onchange="@OnNazevObjektuChanged" placeholder="Název objektu" />
                <label class="sr-only" for="txtNazevObjektu">Název objektu</label>
            </div>
        </div>
        <div class="col-auto">
            <button type="button" onclick="@OnSearch" class="btn btn-success mb-2">Vyhledat</button>
        </div>
        <div class="col-2">
        </div>
        <div class="col-2">
            <button type="button" onclick="@OnNew" class="btn btn-primary mb-2">Nový objekt</button>
        </div>
    </div>

    <Row>
        <Column>

            <KendoGrid Data=@objects Pageable=true PageSize=20 Sortable=true>

                <KendoGridColumns>
                    <KendoGridColumn Title="Objekt" Field=@nameof(ObjectModelDto.objekt) />
                    <KendoGridColumn Title="Typ objektu" Field=@nameof(ObjectModelDto.typ) />
                    <KendoGridColumn Title="Oblast" Field=@nameof(ObjectModelDto.oblast) />

                    <KendoGridCommandColumn>
                        <KendoGridCommandButton Command="View" Icon="edit" OnClick="TriggerView">Náhled</KendoGridCommandButton>
                        <KendoGridCommandButton Command="Edit" Icon="edit" OnClick="TriggerEdit">Upravit</KendoGridCommandButton>
                        <KendoGridCommandButton Command="Delete" Icon="delete" OnClick="TriggerRemove">Odstranit</KendoGridCommandButton>
                        <KendoGridCommandButton Command="Plovak" Icon="edit" OnClick="TriggerPlovak">Plovák</KendoGridCommandButton>
                    </KendoGridCommandColumn>


                </KendoGridColumns>

            </KendoGrid>
        </Column>
    </Row>
}

@functions {

    private string LocalityId { get; set; }
    bool isPopupOpen = false;
    string removeQuestion = "";
    int removeId = 0;
    List<ObjectModelDto> objects;
    private List<PlovakModelDto> plovaks;
    private string nazevObjektu;
    

     protected override async Task OnInitAsync()
    {
        if (!session.AuthInformation.IsAuthentized)
        {
            uriHelper.NavigateTo("/login");
            return;
        }

        base.OnInit();
    }

    protected override void OnParametersSet()
    {
        try
        {
            LocalityId = session.NavigateModel.LocalityId;
            session.SetLocality(Convert.ToInt32(LocalityId));
            ((ObjectService)(objectService)).SetConnectionString();
            objects = objectService.GetObjects(false);
        }
        catch (Exception ex)
        {
            logger.LogError("OnParametersSet", ex);
        }

        base.OnParametersSet();
    }

    void OnSearch()
    {
        List<ObjectModelDto> dbObjects;

        if (nazevObjektu != null && nazevObjektu != "")
            dbObjects = objectService.GetObjects(nazevObjektu);
        else
            dbObjects = objectService.GetObjects(false);

        // Musime zachovat pointer na objekt ktery je bindovan !
        objects.Clear();
        objects.AddRange(dbObjects);


        StateHasChanged();
    }


    void OnNazevObjektuChanged(UIChangeEventArgs changeEvent)
    {
        nazevObjektu = (string)changeEvent.Value;
    }

    void OnNew()
    {
        session.NavigateModel.LocalityId = session.LocalityId.ToString();
        session.NavigateModel.ObjektId = "0";
        session.NavigateModel.Action = "New";
        uriHelper.NavigateTo($"/objektdetail");
    }

    void TriggerView(GridCommandEventArgs args)
    {
        var item = (args.Item as ObjectModelDto);
        TriggerObjectDetail("View", item);

    }

    void TriggerEdit(GridCommandEventArgs args)
    {
        var item = (args.Item as ObjectModelDto);
        TriggerObjectDetail("Edit", item);
    }

    void TriggerRemove(GridCommandEventArgs args)
    {
        var item = (args.Item as ObjectModelDto);

        isPopupOpen = true;
        removeId = item.objekt_id.Value;
        removeQuestion = $"Opravdu chcete odstranit: {item.objekt} ?";
        StateHasChanged();
    }

    void TriggerObjectDetail(string action, ObjectModelDto item)
    {
        session.NavigateModel.LocalityId = session.LocalityId.ToString();
        session.NavigateModel.ObjektId = item.objekt_id.Value.ToString();
        session.NavigateModel.Action = action;
        uriHelper.NavigateTo($"/objektdetail");
    }

    void TriggerPlovak(GridCommandEventArgs args)
    {
        var item = (args.Item as ObjectModelDto);
        session.NavigateModel.LocalityId = session.LocalityId.ToString();
        session.NavigateModel.ObjektId = item.objekt_id.Value.ToString();
        session.NavigateModel.Action = "View";

        uriHelper.NavigateTo($"/plovak");
    }

    void RemoveObject()
    {
        var obj = objectService.GetObject(removeId);
        obj.delete_u = session.AuthInformation.Username;
        obj.delete_d = DateTime.Now;
        objectService.SaveObject(obj);
        OnSearch();
    }

    void OnDropDownClickPlovak()
    {

    }

    void ViewDetail(string action, int id)
    {
    }

    void OpenPopup()
    {
        isPopupOpen = true;
        StateHasChanged();
    }

}
