@page "/objekt"

@inject IUriHelper uriHelper
@inject SisWeb.Services.Session.ISessionHelper session
@inject SisWeb.Services.SisCore.IObjectService objectService
@inject ILogger<Objekt> logger

@using SisWeb.Services.Dto.Sis
@using SisWeb.Services.SisCore;
@using Telerik.Blazor.Components.Grid
@using SisWeb.Services.Session

@if (objects == null)
{
    <p><em>Loading data...</em></p>
}
else
{
    <ConfirmDialog IsPopupOpen="@isPopupOpen" Animation="ConfirmDialog.AnimationType.FadeIn" ActionMethod="@RemoveObject" Descr="@removeQuestion" Title="Opravdu chcete odstranit záznam?" />
    isPopupOpen = false;

    <div class="form-row align-items-center">
        <div class="col-auto">
            <div class="md-form">
                <input type="text" class="form-control mb-2" id="txtNazevObjektu" onchange="@OnNazevObjektuChanged" placeholder="Název objektu" />
                <label class="sr-only" for="txtNazevObjektu">Název objektu</label>
            </div>
        </div>
        <div class="col-auto">
            <button type="button" onclick="@OnSearch" class="btn btn-success mb-2">Vyhledat</button>
        </div>
        <div class="col-2">
            <button type="button" onclick="@OnNew" class="btn btn-primary mb-2">Nový objekt</button>
        </div>
    </div>

    <Row>
        <Column>
            <TelerikGrid Data=@objects Pageable="true" PageSize=20 Sortable="true">
                <TelerikGridColumns>
                    <TelerikGridColumn Title="Objekt" Field=@nameof(ObjectModelDto.objekt) />
                    <TelerikGridColumn Title="Typ objektu" Field=@nameof(ObjectModelDto.typ) />
                    <TelerikGridColumn Title="Oblast" Field=@nameof(ObjectModelDto.oblast) />

                    <TelerikGridCommandColumn>
                        <TelerikGridCommandButton Command="View" Icon="edit" OnClick="TriggerView">Náhled</TelerikGridCommandButton>
                        <TelerikGridCommandButton Command="Edit" Icon="edit" OnClick="TriggerEdit">Upravit</TelerikGridCommandButton>
                        <TelerikGridCommandButton Command="Delete" Icon="delete" OnClick="TriggerRemove">Odstranit</TelerikGridCommandButton>
                        <TelerikGridCommandButton Command="Plovak" Icon="edit" OnClick="TriggerPlovak">Plovák</TelerikGridCommandButton>
                    </TelerikGridCommandColumn>

                </TelerikGridColumns>

             

            </TelerikGrid>
        </Column>
    </Row>
}

@functions {

    string LocalityId { get; set; }
    bool isPopupOpen = false;
    string removeQuestion = "";
    int removeId = 0;
    List<ObjectModelDto> objects;
    private List<PlovakModelDto> plovaks;
    private string nazevObjektu;
    private UserSession userSession = null;


    protected override void OnInit()
    {
        userSession = session.GetSession();

        if (!userSession.AuthInformation.IsAuthentized)
        {
            uriHelper.NavigateTo("/login");
            return;
        }

        base.OnInit();
    }

    protected override void OnParametersSet()
    {
        try
        {
            userSession = session.GetSession();
            LocalityId = userSession.NavigateModel.LocalityId;
            userSession.SetLocality(Convert.ToInt32(LocalityId));
            ((ObjectService)(objectService)).SetConnectionString(userSession, Convert.ToInt32(LocalityId));
            objects = objectService.GetObjects(false);
        }
        catch (Exception ex)
        {
            logger.LogError("OnParametersSet", ex);
            userSession.LastError = ex;
            uriHelper.NavigateTo("\\");
            return;
        }

        base.OnParametersSet();
    }

    void OnSearch()
    {
        List<ObjectModelDto> dbObjects;

        if (nazevObjektu != null && nazevObjektu != "")
            dbObjects = objectService.GetObjects(nazevObjektu);
        else
            dbObjects = objectService.GetObjects(false);

        // Musime zachovat pointer na objekt ktery je bindovan !
        objects.Clear();
        objects.AddRange(dbObjects);


        StateHasChanged();
    }


    void OnNazevObjektuChanged(UIChangeEventArgs changeEvent)
    {
        nazevObjektu = (string)changeEvent.Value;
    }

    void OnNew()
    {
        userSession = session.GetSession();
        userSession.NavigateModel.LocalityId = userSession.LocalityId.ToString();
        userSession.NavigateModel.ObjektId = "0";
        userSession.NavigateModel.Action = "New";
        session.SaveSession(userSession);
        
        uriHelper.NavigateTo($"/objektdetail");
    }

    void TriggerView(GridCommandEventArgs args)
    {
        var item = (args.Item as ObjectModelDto);
        TriggerObjectDetail("View", item);

    }

    void TriggerEdit(GridCommandEventArgs args)
    {
        var item = (args.Item as ObjectModelDto);
        TriggerObjectDetail("Edit", item);
    }

    void TriggerRemove(GridCommandEventArgs args)
    {
        var item = (args.Item as ObjectModelDto);

        isPopupOpen = true;
        removeId = item.objekt_id.Value;
        removeQuestion = $"Opravdu chcete odstranit: {item.objekt} ?";
        StateHasChanged();
    }

    void TriggerPlovak(GridCommandEventArgs args)
    {
        var item = (args.Item as ObjectModelDto);

        userSession = session.GetSession();
        userSession.NavigateModel.LocalityId = userSession.LocalityId.ToString();
        userSession.NavigateModel.ObjektId = item.objekt_id.Value.ToString();
        userSession.NavigateModel.Action = "View";
        session.SaveSession(userSession);

        uriHelper.NavigateTo($"/plovak");
    }

    void TriggerObjectDetail(string action, ObjectModelDto item)
    {
        userSession = session.GetSession();
        userSession.NavigateModel.LocalityId = userSession.LocalityId.ToString();
        userSession.NavigateModel.ObjektId = item.objekt_id.Value.ToString();
        userSession.NavigateModel.Action = action;
        session.SaveSession(userSession);

        uriHelper.NavigateTo($"/objektdetail");
    }

    void RemoveObject()
    {
        var obj = objectService.GetObject(removeId);
        obj.delete_u = userSession.AuthInformation.Username;
        obj.delete_d = DateTime.Now;
        objectService.SaveObject(obj);
        OnSearch();
    }

    void OnDropDownClickPlovak()
    {

    }

    void ViewDetail(string action, int id)
    {
    }

    void OpenPopup()
    {
        isPopupOpen = true;
        StateHasChanged();
    }

}
